<Route
  path="/invoices/:id"
  // if an exception is thrown here
  loader={loadInvoice}
  // here
  action={updateInvoice}
  // or here
  element={<Invoice />}
  // this will render instead of `element`
  errorElement={<ErrorBoundary />}
/>;


let location = useLocation();
{
	hash: ""
	key:"default"
	pathname: "/downlo"
	search: "?name=Sujith"
	state: null
}






# Authentication

/auth : AuthenticationPage

{
	path : '/',
	element : <RootLayout />,
	errorPage: <ErrorPage>,
	id: 'root',
	loader: () => {}
	
	children : [
		{
			index : true,
			element : <HomePage />
		},
		{	
			path : 'auth',
			element : <AuthenticationPage />
		},
	
	]
}

# Search Parameters

const [searchParams, setSearchParams] = useSearchParams();

const isLogin = searchParams.get('mode') === 'login'

<Link to=`?mode=${isLogin ? 'signup' : 'login'}`>

</Link>


# Impl Authentication


export async function action({req}){


	const searchParams = new URL(req.url).searchParams;
	const mode = searchParams.get('mode') || 'login'

	if(mode != 'login' && mode !== 'signup'){
		throw json(
			{
				message: 'Unsupported mode.'
			},
			{
				status: 422
			}
		);

	}


	const data = await req.formData();
	
	const authData = {
		email : data.get('email'),
		password: data.get('password);
	}
	
	// API Call based on mode.
	
	// Result
	if(response.status === 422 || response.status === 401){
		throw json({},{});
	}
	
	// Manage Token
	
	// Save the token inside LocalStorage
	
	
	return redirect('/')
}



useActionData()

{data && data.message && <p>...</p>}

const navigation = useNavigation();
navigation.state === 'submitting'


Adding User Login with Token

#1
Store the token...

#2

export function getAuthToken() {

	const token = localStorage.getItem('token');
	// Check token is expired or not
	
	
	return token;
}


Add Router Protection:

export function checkAuthLoader() {

	const token = getAuthToken();
	if(!token){
		return redirect('/auth');
	}
}


---


function RootLayout() {


	const submit = useSubmit();

	useEffect(()=>{
		if(!token){
			return;
		}
		
		setTimer(() => {
				const opt = {
					action : '/logout',
					method: 'post'
				}
		
				submit(null,opt)
		
		}, 1 * 60 * 60 * 1000);
	
	},[token, submit])
}

Fixing the bug in token

const expiration = new Date()
expiration.setHours(expiration.getHours() + 1);
localStorate.setItem(expiration, expiration.toISOString());



exort function getTokenDuration(){
	const storedExpDate = localStorage.getItem('expiration');
	const exp = new Date(storedExpDate);
	const now = new Date();
	const duration = expirationDate.getTime() - now.getTime();
	return duration;
}

export fucntion isTokenExpired() {
	const const = getTokenDuration();
	return tokenDuration < 0;
}


---

### Router Action

export const loginAction = (props) => {
    console.info('Start: loginAction');
    console.info('Props: ', props);
    console.info('End: loginAction');
    return null;
}

props -> context, params, request

request -> body, url, method, formData()

export async function action({ request }) {

	const data = await request.formData();
	
	const authData = {
		email: data.get('email'),
		password: data.get('password'),
	};
}








### useNavigation()

Used to check the state of the page.

const navigation = useNavigation();

const isSubmitting = navigation.state === 'submitting';
 


### Search Params from URL

const searchParams = new URL(request.url).searchParams;
const mode = searchParams.get('mode');
 

### useActionData()

To get action data.

### useSearchParams()

To get the search params

const [searchParams] = useSearchParams();
const mode = searchParams.get('mode');



### useRouteError
### thow json error

json(data, options);

Whenever we get error in application it will throw ErrorResponseImpl automatically by router-dom. If we can to throw it explicitly we need to use json().

if (!response.ok) {
    throw json({ message: 'Could not authenticate user.' }, { status: 500 });
}

let error = useRouteError();
{
	data: "Error: No route matches URL downlo"
	error: {
		message:
		stack:
	},
	internal: true,
	status : 404,
	statusText : 'Not Found'
}
























