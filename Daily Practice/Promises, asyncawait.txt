# Promises, async/await


**Asynchronous actions**
- Actions that we initiate now, but they finish later.
Ex: setTimeout

resolve -> value
reject 	-> error

States: pending, fulfilled, rejected
result:	undefined, value, error

executor : the producting code

let promise = new Promise(function(resolve, reject) {
	setTimeout(() => resolve("done"), 1000);
});

executor function: function(resolve, reject)
producing code :  setTimeout(() => resolve("done"), 1000);



let promise = new Promise(function(resolve, reject) {
	setTimeout(() => reject(new Error("Whoops!")), 1000);
});

let promise = new Promise(function(resolve, reject) {
	resolve("done"); // execute
	reject(new Error("…")); // ignored
	setTimeout(() => resolve("…")); // ignored
});


> The state and result are internal
The properties state and result of the Promise object are internal. We can’t directly access them. We can use the methods .then/.catch/.finally for that. They are described below.

new Promise((resolve, reject) => {
	setTimeout(() => reject("value"), 2000);
	setTimeout(() => resolve("value"), 2000);
})
  .finally(() => console.info('Finally :' + "Promise ready")) // triggers first
  .then(result => console.info('Then :' +result)) // <-- .then shows "value"
  .catch(err => console.info('Error :'+err));

Note: then(res, err) takes two callback functions as args, one is for function and another for err. .catch(err) is shortened and more strightforword.

The call .catch(f) is a complete analog of .then(null, f), it’s just a shorthand.

Cleanup: finally
E.g. stopping loading indicators, closing no longer needed connections, etc.

Finally:
- No arguments
- We don’t know whether the promise is successful or not
- Promise outcome is handled by the next handler
- When finally throws an error, then the execution goes to the nearest error handler.

new Promise( (resolve, reject) => {
	// Executor cpde
})
.finally( () => {})
.then(	res = {})
.catch( err = {})


Example: 001
function delay(ms) {
 	return new Promise( (res, rej) => {
		setTimeout( () => res('Done'), ms);
	} );
}

delay(3000).then(() => console.info('runs after 3 seconds'));


Example: 001

function randomPromise(){
	let promise = new Promise( (resolve, reject) => {
		let i = Math.floor(Math.random() * 2);
		if(i==0){
			reject('Zero')
		}else{
			resolve('Success')
		}
	})
	return promise;
}

randomPromise()
.finally( ()=> console.log('Completed...') )
.then( result => console.log(result) )
.catch( error => console.log(error))


Example: 002
Example: 003
Example: 004
Example: 005
Example: 006
Example: 007
Example: 008
Example: 009



# Promises chaining

The return type of the .then fuction is a Promise. So it can be chained together. It works like a pipe, the output of the one .then function is the input to next .then funciton.

new Promise(function(resolve, reject) {

  setTimeout(() => resolve(1), 1000); // (*)

}).then(function(result) { // (**)

  console.info(result); // 1
  return result * 2;

}).then(function(result) { // (***)

  console.info(result); // 2
  return result * 2;

}).then(function(result) {

  console.info(result); // 4
  return result * 2;`

}).catcg((err) => {

	console.info('Error')


} );




# Promise
### Promise, Promises, .catch, .then

A Promise is an object that represents the eventual completion (or failure) of an asynchronous
operation and its resulting value. It is a way to handle asynchronous operations in a more
structured and manageable manner.
A Promise can be in one of three states:
• Pending: The initial state of a Promise. It is neither fulfilled nor rejected.
• Fulfilled: The Promise has successfully completed, and a value is available. This is typically
referred to as resolving the Promise.
• Rejected: The Promise encountered an error or failure during execution. This is typically
referred to as rejecting the Promise.
Unlike synchronous operations, which are executed sequentially and block the program until
they are completed, asynchronous operations allow the program to continue executing other
tasks while waiting for the completion of the asynchronous task.
Note:
for...of only work with iterables, not with object. For array it will give values instead of indexes.
for...in works with iterables as well as objects. For array, it will give indexes. For an object it will
give key values.


#### Promise with then

```javascript
let promise = new Promise((resolve, reject) => {

	resolve('Done');
	reject(new Error('No content'));
	
}).then(
	result => {
		console.info('Result: ', result);
	},
	error => {
		console.info('Error: ', error);
	}
);
```

#### Only on fullfilled

```javascript
let promise = new Promise((resolve, reject) => {
	resolve('Done');
}).then(
	result => {
		console.info('Result: ', result);
	}
)
```
#### Only on rejected

```javascript
let promise = new Promise((resolve, reject) => {

	//resolve('Done');
	reject(new Error('No content'));

}).then( null,
	error => {
		console.info('Error Occored');
	}
)
```

#### Promise with catch

```javasript
let promise = new Promise((resolve, reject) => {
	reject(new Error('Hey, get out of here man!!'));
}).then(
	result => {
		console.info('Result: ', result);
	}
).catch(error => {
	console.log("Error message:", error.message);
	console.log("Error name:", error.name);
	console.log("toString:", error.toString());
	console.log("Is instance of Error:", error instanceof Error);
})
```

#### Promise with finally block

```javasript
let promise = new Promise((resolve, reject) => {
	reject(new Error('Hey, get out of here man!!'));
}).then(
	result => {
		console.info('Result: ', result);
	}
).catch(error => {
	console.log("Error message:", error.message);
}).finally(
	() => {
		console.info('Promise is ready!');
	}
)
```

#### Promise example

```javasript
const fetchData = () => {
	const promise = new Promise(
		(resolve, reject) => {
			let value = Math.random();
			if (value > 0.5) {
				resolve(value);
			} else {
				reject(new Error('Proper value not generated!'));
			}
		}
	);
	return promise;
}

fetchData().then(results => {
	console.info(results);
}).catch(error => {
	console.info(error.message);
}).finally(
	() => {
		console.info('Finished..:]');
	}
);
```







































