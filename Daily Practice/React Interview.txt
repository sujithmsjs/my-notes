
1. What is React?
- Open source
- Javascript Library
- Useful for developing single page UI.
- Reusable UI
- Follows Component based Approach.

Features:
- SSR(Server-side rendering)
- Virtual DOM
- Unidirectional data binding
- Reusable or composable UI components
- Gentle learning curve
- SEO Friendly
- Huge Ecosystem


Virtual DOM: React uses virtual DOM to render the view. As the name suggests, virtual DOM is a virtual representation of the real DOM. Each time the data changes in a react app, a new virtual DOM gets created. Creating a virtual DOM is much faster than rendering the UI inside the browser. Therefore, with the use of virtual DOM, the efficiency of the app improves.


What are the limitations of React?

The few limitations of React are as given below:

React is not a full-blown framework as it is only a library.
The components of React are numerous and will take time to fully grasp the benefits of all.
It might be difficult for beginner programmers to understand React.
Coding might become complex as it will make use of inline templating and JSX.

useState():
- Built-In React Hook
- Allows to have a state variable in functional components
- It should be used when the DOM has something that is dynamically manipulating/controlling.


Keys in React:
A key is a special string attribute that needs to be included when using lists of elements.
- Avoid using array index as the key
- Each item should have unique key
- Keys help react identify which elements were added, changed or removed.
- Keys should be given to array elements for providing a unique identity for each element.
- Without keys, React does not understand the order or uniqueness of each element.
- With keys, React has an idea of which particular element was deleted, edited, and added.
- Keys are generally used for displaying a list of data coming from an API.


What is JSX?
- JavaScript XML
- It allows us to write HTML inside JavaScript and place them in the DOM without using functions like appendChild( ) or createElement( ).
- JSX provides syntactic sugar for React.createElement( ) function.


What are the differences between functional and class components?
- Declaration
- Handling props
- Handling state

Virtual DOM?
As stated by the react team, virtual DOM is a concept where a virtual representation of the real DOM is kept inside the memory and is synced with the real DOM by a library such as ReactDOM.



Why was virtual DOM introduced? 
- DOM manipulation is the integral part of Web Apps.
- Real DOM manipulation is costly
- Updating the entair DOM will descrease the performance.
- 



Here's a list of some commonly used events in React:

onClick: Triggered when a clickable element, such as a button or link, is clicked.

onDoubleClick: Fired when an element is double-clicked by the user.

onMouseDown: Occurs when the mouse button is pressed down over an element.

onMouseUp: Fired when the mouse button is released after being pressed down over an element.

onMouseMove: Triggered when the mouse pointer moves within an element.

onKeyPress: Occurs when a key on the keyboard is pressed down.

onKeyDown: Fired when a key on the keyboard is initially pressed down.

onKeyUp: Occurs when a key on the keyboard is released.

onChange: Used with form elements like input fields and selects to capture changes in their values.

onInput: Fired when an input element's value changes. Similar to onChange but with some differences in behavior.

onFocus: Triggered when an element receives focus, typically by being clicked or tabbed to.

onBlur: Occurs when an element loses focus, often after clicking outside of it or tabbing away.

onSubmit: Fired when a form is submitted, usually when the user clicks a submit button.

onScroll: Occurs when an element with a scrollbar is scrolled.

onLoad: Triggered when an image or other media element has finished loading.

onError: Fired when an error occurs while loading an image or other media.

onContextMenu: Occurs when the right mouse button is clicked to open a context menu.

onDragStart: Fired when an element is dragged.

onDrop: Occurs when a draggable element is dropped onto a target element.

onTouchStart: Triggered when a touch event begins, such as a touch on a touchscreen device.

onTouchMove: Fired when a touch event moves, such as swiping.

onTouchEnd: Occurs when a touch event ends, such as lifting a finger from a touchscreen.













https://www.syncfusion.com/blogs/post/7-vs-code-extensions-for-react-developers.aspx


React Interview


What is React?

React is a JavaScript library for building user interfaces.
React is used to build single-page applications.
React allows us to create reusable UI components.
React, sometimes referred to as a frontend JavaScript framework, is a JavaScript library created by Facebook.


How does React Work?

React creates a VIRTUAL DOM in memory.
Instead of manipulating the browser's DOM directly, React creates a virtual DOM in memory, where it does all the necessary manipulating, before making the changes in the browser DOM.
React only changes what needs to be changed!
React finds out what changes have been made, and changes only what needs to be changed.

What are webpack, Babel, and ESLint?



What is the Use the new root API ?

import ReactDOM from 'react-dom/client';
const container = document.getElementById('mydiv');
const root = ReactDOM.createRoot(container);
root.render(<Hello />)


React Render HTML?
React renders HTML to the web page by using a function called createRoot() and its method render().
The render() : method is then called to define the React component that should be rendered.
The createRoot() : function takes one argument, an HTML element. The purpose of the function is to define the HTML element where a React component should be displayed.

The Root Node?
The root node is the HTML element where you want to display the result.
It is like a container for content managed by React.


What is JSX?

JSX stands for JavaScript XML.
JSX allows us to write HTML in React.
JSX makes it easier to write and add HTML in React.

JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement()  and/or appendChild() methods. JSX converts HTML tags into react elements.

const myElement = React.createElement('h1', {}, 'I do not use JSX!');


Expressions in JSX:
With JSX you can write expressions inside curly braces { }.
The expression can be a React variable, or property, or any other valid JavaScript expression.


One Top Level Element:
The HTML code must be wrapped in ONE top level element.
So if you like to write two paragraphs, you must put them inside a parent element, like a div element.


FRAGMENT <></>

Close empty elements with />

Attribute in JSX:
The class attribute is a much used attribute in HTML, but since JSX is rendered as JavaScript, and the class keyword is a reserved word in JavaScript, you are not allowed to use it in JSX. Use attribute className instead. JSX solved this by using className instead. When JSX is rendered, it translates className attributes into class attributes.

React supports if statements, but not inside JSX.


React Components:
Components are like functions that return HTML elements. Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return HTML.
Components come in two types, Class components and Function components, in this tutorial we will concentrate on Function components.

It is now suggested to use Function components along with Hooks, which were added in React 16.8.


When creating a React component, the component's name MUST start with an upper case letter.



React Props:
- Props are arguments passed into React components.
- React Props are like function arguments in JavaScript and attributes in HTML.
- Props are passed to components via HTML attributes.
- Props are also how you pass data from one component to another, as parameters.
- Components can be passed as props, which stands for properties.
- Props are like function arguments, and you send them into the component as attributes.
- If you have a variable to send, and not a string, you just put the variable name inside curly brackets.
- React Props are read-only! You will get an error if you try to change their value.

Components in Files
React is all about re-using code, and it is recommended to split your components into separate files.
To do that, create a new file with a .js file extension and put the code inside it:
Note that the filename must start with an uppercase character.




React Events:
- Just like HTML DOM events, React can perform actions based on user events.
- React has the same events as HTML: click, change, mouseover etc.
- React events are written in camelCase syntax.
- React event handlers are written inside curly braces.
- To pass an argument to an event handler, use an arrow function.
- Event handlers have access to the React event that triggered the function.

React Conditional Rendering:
- If statement
- Logical && Operator
- Ternary Operator

React Lists:
- In React, you will render lists with some type of loop.
- The JavaScript map() array method is generally the preferred method.



Keys
- Keys allow React to keep track of elements. This way, if an item is updated or removed, only that item will be re-rendered instead of the entire list.
- Keys need to be unique to each sibling. But they can be duplicated globally.
- Generally, the key should be a unique ID assigned to each item. As a last resort, you can use the array index as a key.

React Forms:
- Just like in HTML, React uses forms to allow users to interact with the web page.
- In HTML, form data is usually handled by the DOM.
- In React, form data is usually handled by the components.
- When the data is handled by the components, all the data is stored in the component state.


What is single source of truth?



React Memo:
Using memo will cause React to skip rendering a component if its props have not changed. This can improve performance.

The CHILD component re-renders even when the props have not changed.
If this component was complex, it could cause performance issues.
To fix this, we can use memo.
Use memo to keep the Todos component from needlessly re-rendering.
Wrap the Todos component export in memo:
Now the Todos component only re-renders when the todos that are passed to it through props are updated.

export default memo(Todos);





Styling React Using CSS:

There are many ways to style React with CSS, this tutorial will take a closer look at three common ways:

Inline styling: In JSX, JavaScript expressions are written inside curly braces, and since JavaScript objects also use curly braces, the styling in the example above is written inside two sets of curly braces {{}}.


style={{color: "red"}}

camelCased Property Names
Since the inline CSS is written in a JavaScript object, properties with hyphen separators, like background-color, must be written with camel case syntax:


CSS stylesheets:



CSS Modules:

Another way of adding styles to your application is to use CSS Modules.
CSS Modules are convenient for components that are placed in separate files.
The CSS inside a module is available only for the component that imported it, and you do not have to worry about name conflicts.

Create the CSS module with the .module.css extension, example: my-style.module.css.

import styles from './my-style.module.css'; 
<h1 className={styles.bigblue}>





What is Sass?
SCSS (Sassy CSS) is a superset of CSS (Cascading Style Sheets) that adds powerful features and capabilities to the basic CSS language. It is a CSS preprocessor, which means it extends CSS with additional functionality, making it easier and more efficient to write and maintain styles for web applications.
Sass is a CSS pre-processor.
Sass files are executed on the server and sends CSS to the browser.
Install Sass by running this command in your terminal:
>npm i sass


Certainly! Here are the answers to the React interview questions in the same order:

1. **What is React, and how does it differ from traditional JavaScript frameworks?**
   React is a JavaScript library for building user interfaces. It differs from traditional frameworks by focusing solely on the view layer. React's core idea is to break the user interface into small, reusable components, making it more maintainable and efficient.

2. **What is JSX, and why is it used in React?**
   JSX (JavaScript XML) is a syntax extension for JavaScript. It allows developers to write HTML-like code within their JavaScript files. React uses JSX to describe what the UI should look like, making it more readable and easier to understand.

3. **How do you create a functional component in React?**
   You create a functional component in React by defining a JavaScript function that returns JSX. For example:
   ```jsx
   function MyComponent() {
     return <div>Hello, World!</div>;
   }
   ```

4. **Explain the concept of state in React.**
   State in React is a built-in object that stores data that can change over time and affect a component's rendering. You can use the `useState` hook to manage state in functional components.

5. **What is a prop in React, and how do you pass data from parent to child components?**
   Props (short for properties) are a way to pass data from a parent component to a child component. You define props in the parent component and pass them as attributes to the child component when rendering it.

6. **What is the key attribute used for in React when rendering lists of components?**
   The `key` attribute is used to help React identify individual elements in a list, ensuring efficient updates and avoiding unnecessary re-renders.

7. **What is the virtual DOM, and how does it improve performance in React applications?**
   The virtual DOM is a lightweight in-memory representation of the actual DOM. React uses it to minimize direct manipulation of the DOM, which can be slow. By comparing the virtual DOM with the real DOM, React can efficiently update only the necessary parts of the UI, improving performance.

8. **Describe the purpose of the useEffect hook in React.**
   `useEffect` is used to perform side effects in functional components, such as data fetching, setting up subscriptions, or manually changing the DOM. It runs after rendering and can also handle cleanup.

9. **What is conditional rendering in React, and how can you achieve it?**
   Conditional rendering in React involves rendering different content based on certain conditions or states. You can achieve it using conditional statements, such as `if` or the ternary operator, within your JSX.

10. **Explain the concept of controlled components in React forms.**
    Controlled components in React are form elements whose values are controlled by the component's state. This means that the form input values are tied to the component's state, and changes to the input values are reflected in the state.

11. **What are React fragments, and why are they useful?**
    React fragments are a way to group multiple elements without adding extra nodes to the DOM. They are useful for avoiding unnecessary divs or other elements in the rendered output.

12. **What is the purpose of the useContext hook, and how is it used for state management?**
    `useContext` is used for accessing the context of a parent component. It allows you to share data between components without having to pass props manually through intermediate components.

13. **What is the difference between props and state in React?**
    Props are used to pass data from parent to child components and are immutable, while state is used to manage mutable data within a component and can be changed using the `setState` function.

14. **How can you prevent a component from re-rendering in React?**
    You can prevent a component from re-rendering by using the `React.memo` higher-order component for functional components and `PureComponent` for class components. Additionally, you can use the `shouldComponentUpdate` lifecycle method for class components.

15. **What is the purpose of the useRef hook, and when might you use it?**
    `useRef` is used to create mutable ref objects. It's often used for accessing and manipulating DOM elements directly or for persisting values across renders without causing re-renders.

16. **How do you handle events in React?**
    In React, you can handle events by attaching event handlers to elements using JSX syntax. Common event handlers include `onClick`, `onChange`, and `onSubmit`.

17. **What is the significance of the "key" prop in React lists?**
    The "key" prop is used to help React identify and track items in a list. It's essential for efficient updates and should be unique among siblings in the list.

18. **Explain the concept of lifting state up in React.**
    Lifting state up is the practice of moving state from a child component to a parent component when multiple child components need access to the same state or when the state affects multiple children.

19. **How can you pass data between sibling components in React?**
    To pass data between sibling components in React, you typically lift the state up to a common parent component and then pass the data down to the sibling components as props.

20. **What is the purpose of the useCallback hook, and when is it beneficial to use it?**
    `useCallback` is used to memoize a function to prevent it from being recreated on every render. It's beneficial when passing functions as props to child components to avoid unnecessary re-renders.

React is an open-source JavaScript library used for building user interfaces, particularly for creating interactive and dynamic web applications. It was developed and is maintained by Facebook and a community of individual contributors. React is often referred to as a "front-end" or "UI" library because it primarily focuses on the presentation layer of an application.

Here are some key points that explain React and how it differs from traditional JavaScript frameworks:

1. **Component-Based Architecture:**
   React is centered around a component-based architecture. In React, you break down the user interface into reusable, self-contained components. Each component represents a part of the UI and can have its own state, logic, and rendering. This makes it easier to manage and maintain large and complex applications because you can work on individual components independently.

2. **Virtual DOM (Document Object Model):**
   React introduces the concept of a virtual DOM, which is a lightweight in-memory representation of the actual DOM in a web page. When you make changes to the UI, React doesn't immediately update the real DOM; instead, it updates the virtual DOM. This allows React to efficiently determine the difference between the virtual DOM and the actual DOM (reconciliation) and update only the parts of the page that have changed. Traditional JavaScript frameworks might rely more on direct DOM manipulation, which can be less efficient.

3. **Unidirectional Data Flow:**
   React promotes a unidirectional data flow, meaning that data flows in one direction through a hierarchy of components. This makes it easier to understand how data changes affect the UI because changes originate from a single source of truth (usually at the top-level component) and propagate down through child components.

4. **JSX (JavaScript XML):**
   React uses JSX, a syntax extension for JavaScript, to define the structure of the user interface. JSX allows developers to write HTML-like code directly within their JavaScript files, making the code more readable and expressive. JSX is then transpiled into standard JavaScript by tools like Babel before it's executed in the browser.

5. **No Opinions on Data Fetching or Routing:**
   Unlike some traditional frameworks that come with opinions on data fetching or routing, React is more flexible. It leaves decisions about data fetching, routing, and state management to developers or allows the use of third-party libraries to handle these concerns. This flexibility gives developers the freedom to choose the best tools for their specific use cases.

6. **Community and Ecosystem:**
   React has a thriving and active community with a vast ecosystem of libraries and tools, both officially maintained by Facebook and created by the community. This rich ecosystem allows developers to extend React's functionality and integrate it with various technologies, such as state management libraries like Redux and Mobx, or routing libraries like React Router.

7. **Reusability and Maintainability:**
   React's component-based approach and focus on reusability make it easier to build and maintain large applications. Components can be reused across different parts of the application or in entirely different projects, which can save development time and promote code consistency.

In summary, React is a JavaScript library that distinguishes itself from traditional JavaScript frameworks by its component-based architecture, virtual DOM, unidirectional data flow, use of JSX, flexibility in handling various concerns, and its vibrant community and ecosystem. These characteristics make React a popular choice for building modern, efficient, and maintainable user interfaces.


React.js, a popular JavaScript library for building user interfaces, offers several key features that make it a compelling choice for web development. Here are some of the prominent features of React:

1. **Component-Based Architecture:**
   React is centered around a component-based architecture. Developers build applications by creating reusable, self-contained components that represent specific parts of the user interface. This approach simplifies development, promotes code reusability, and enhances maintainability.

2. **Virtual DOM (Document Object Model):**
   React uses a virtual DOM to optimize performance. When changes are made to the UI, React updates a virtual representation of the DOM first, minimizing direct manipulation of the actual DOM. By efficiently comparing the virtual DOM with the real DOM, React only updates the parts of the page that have changed, resulting in faster rendering and improved performance.

3. **JSX (JavaScript XML):**
   JSX is a syntax extension for JavaScript that allows developers to write HTML-like code directly within their JavaScript files. React components use JSX to define the structure of the user interface, making the code more readable and expressive. JSX is transpiled into standard JavaScript before execution.

4. **Unidirectional Data Flow:**
   React follows a unidirectional data flow, where data flows in a single direction through a hierarchy of components. This predictable data flow makes it easier to understand how changes to data affect the UI and helps prevent bugs related to data synchronization.

5. **Reusable Components:**
   React's component-based nature encourages the creation of reusable UI elements. Components can be easily composed and reused throughout an application, promoting code modularity and reducing redundancy.

6. **State Management:**
   React allows components to manage their own state using the `useState` hook or state management libraries like Redux or Mobx. This enables components to be more self-contained and encapsulated.

7. **Developer Tools:**
   React offers browser extensions like React DevTools, which provide powerful debugging and profiling tools. These tools allow developers to inspect component hierarchies, view component state and props, and analyze performance bottlenecks.

8. **Community and Ecosystem:**
   React has a robust and active community with a wide range of libraries and tools available. This ecosystem includes libraries for state management (e.g., Redux, Mobx), routing (e.g., React Router), form handling (e.g., Formik), and more. Developers can leverage these tools to extend React's functionality and streamline development.

9. **Server-Side Rendering (SSR) and Static Site Generation (SSG):**
   React can be used for server-side rendering and static site generation, enabling SEO-friendly web applications and improving initial page load times. Libraries like Next.js and Gatsby provide solutions for implementing SSR and SSG with React.

10. **Accessibility (a11y) Support:**
    React emphasizes accessibility, making it easier to create web applications that are usable by a wide range of users. Developers can use ARIA attributes and other accessibility practices to ensure compliance with web accessibility standards.

11. **Community and Industry Support:**
    React is widely adopted in the industry and has a large and active community. This means that there is a wealth of documentation, tutorials, and community support available for developers.

12. **Mobile App Development:**
    React Native, a framework built on top of React, allows developers to use React to build mobile applications for iOS and Android platforms. This enables code sharing between web and mobile applications.

These features contribute to React's popularity and make it a versatile and powerful tool for building modern web and mobile applications.


React Hooks:

Hooks were added to React in version 16.8.
Hooks allow function components to have access to state and other React features. Because of this, class components are generally no longer needed.



State as a Snapshot:
State variables might look like regular JavaScript variables that you can read and write to. However, state behaves more like a snapshot. Setting it does not change the state variable you already have, but instead triggers a re-render.

- State behaves more like a snapshot
- Setting it does not change the state variable you already have, but instead triggers a re-render.
- Directly doesn't change the value instead it will re-render.
https://react.dev/learn/state-as-a-snapshot
How setting state triggers re-renders
When and how state updates
Why state does not update immediately after you set it
How event handlers access a “snapshot” of the state

- “Rendering” means that React is calling your component, which is a function.
-  The JSX you return from that function is like a snapshot of the UI in time. 

React batches state updates :

What “batching” is and how React uses it to process multiple state updates
How to apply several updates to the same state variable in a row.
- React waits until all code in the event handlers has run before processing your state updates.


BATCHING:
This lets you update multiple state variables—even from multiple components—without triggering too many re-renders. But this also means that the UI won’t be updated until after your event handler, and any code in it, completes. This behavior, also known as batching, makes your React app run much faster. It also avoids dealing with confusing “half-finished” renders where only some of the variables have been updated.


<button onClick={() => {
  setNumber(number + 5);
  setNumber(n => n + 1);
  setNumber(42);
}}>

Setting state does not change the variable in the existing render, but it requests a new render.
React processes state updates after event handlers have finished running. This is called batching.
To update some state multiple times in one event, you can use setNumber(n => n + 1) updater function.

