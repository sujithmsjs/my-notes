D:\Notes\my-notes\Cheat Sheets\DERIVED QUERIES AND JPQL JPA.md
D:\Notes\my-notes\Cheat Sheets\Native Queries JPA Cheat Sheet.md
D:\Notes\my-notes\July 08 2022\JPQL JPA.txt
D:\Notes\my-notes\Micro services\Query Methods.md
D:\Notes\my-notes\My Test Files\Data JPA.txt
D:\Notes\my-notes\new projects\EmployeeManagement.md
D:\Notes\my-notes\Office Practice\EmployeeManagement.md
D:\Notes\my-notes\Springboot projects\EmployeeManagement.md
D:\Notes\my-notes\Streams Advanced\29-06-2022 TODO List.txt

@Query("SELECT u FROM User u WHERE u.status = ?1")
User findUserByStatus(Integer status);

@Query("SELECT u FROM User u WHERE u.status = ?1 and u.name = ?2")
User findUserByStatusAndName(Integer status, String name);

@Query("SELECT u FROM User u WHERE u.status = :status and u.name = :name")
User findUserByStatusAndNameNamedParams(@Param("status") Integer status, @Param("name") String name));
  
@Query("SELECT u FROM User u WHERE u.status = :status and u.name = :name")
User findUserByStatusAndNameNamedParams(Integer status, String name);

@Query(value = "SELECT u FROM User u WHERE u.name IN :names")
List<User> findUserByNameList(Collection<String> names);

@Modifying
@Query("update User u set u.status = :status where u.name = :name")
int updateUserSetStatusForName(Integer status, String name);


List<Person> findDistinctPeopleByLastnameOrFirstname(String lastname, String firstname);
List<Person> findPeopleDistinctByLastnameOrFirstname(String lastname, String firstname);
List<Person> findByLastnameAndFirstnameAllIgnoreCase(String lastname, String firstname);
List<Person> findByLastnameIgnoreCase(String lastname);
List<Person> findByLastnameOrderByFirstnameAsc(String lastname);
List<Person> findByLastnameOrderByFirstnameDesc(String lastname);
List<Person> findByAddressZipCode(ZipCode zipCode);
Page<User> findByLastname(String lastname, Pageable pageable);
Slice<User> findByLastname(String lastname, Pageable pageable);
List<User> findByLastname(String lastname, Sort sort);
List<User> findByLastname(String lastname, Pageable pageable);
User findFirstByOrderByLastnameAsc();
User findTopByOrderByAgeDesc();
Page<User> queryFirst10ByLastname(String lastname, Pageable pageable);
Slice<User> findTop3ByLastname(String lastname, Pageable pageable);
List<User> findFirst10ByLastname(String lastname, Sort sort);
List<User> findTop10ByLastname(String lastname, Pageable pageable);
Optional<T> findById(Predicate predicate);  
Iterable<T> findAll(Predicate predicate);   
long count(Predicate predicate);            
boolean exists(Predicate predicate);  

# JPQL QUERIES




```sql
SELECT OBJECT(o) from ManufacturerBean as o WHERE o.items IS EMPTY
SELECT OBJECT(o) from ItemsBean as o WHERE o.manufacturer IS NULL
SELECT new java.lang.Integer(MAX(e.empno)) FROM Emp e
SELECT e from Emp e WHERE LENGTH(e.ename)=5
SELECT e from Emp e where MONTH(e.hiredate)=5
SELECT e FROM Emp e WHERE e.dept IN (10)
SELECT e FROM Emp e WHERE e.dept NOT IN (10)
SELECT e.sal FROM Emp e WHERE e.sal BETWEEN 1200 AND 2500 
SELECT e.sal FROM Emp e WHERE e.sal NOT BETWEEN 1200 AND 2500 
SELECT e.sal,e.comm FROM Emp e WHERE e.comm IS NULL
SELECT e.sal,e.comm FROM Emp e WHERE e.comm IS NOT NULL
SELECT MONTH(e.hiredate), FROM Emp e

SELECT CONCAT(e.ename, ' is earning ',e.sal) FROM Emp e

select distinct cat.name from Cat cat
select count(distinct cat.name), count(cat) from Cat cat

SELECT COUNT(DISTINCT(e.dept)) FROM Emp e
SELECT COUNT(DISTINCT(e.dept)),COUNT(e.dept) FROM Emp e

SELECT e FROM Emp e
SELECT e FROM Emp e WHERE e.ename like '%S'
SELECT e FROM Emp e WHERE e.comm IS NULL
SELECT e FROM Emp e WHERE e.comm IS NOT NULL
SELECT e.ename,e.dept.deptno FROM Emp e WHERE e.dept.deptno=30

SELECT e.ename,e.dept.deptno FROM Emp e WHERE e.comm IS NOT NULL

SELECT COUNT(e.ename) FROM Emp e
SELECT COUNT(e.comm) FROM Emp e
SELECT COUNT(e) FROM Emp e - Gives all the records
SELECT e FROM Emp e WHERE e.dept.deptno=20

SELECT e.sal,COUNT(e) FROM Emp e GROUP BY e.sal
SELECT e.dept,COUNT(e) FROM Emp e GROUP BY e.dept

SELECT e.dept.deptno, COUNT(e) 	 FROM Emp e GROUP BY e.dept
SELECT e.dept.deptno, MAX(e.sal) FROM Emp e GROUP BY e.dept
SELECT e.dept.deptno, MIN(e.sal) FROM Emp e GROUP BY e.dept

SELECT e.dept.dname,  AVG(e.sal) FROM Emp e GROUP BY e.dept

SELECT e.dept.deptno, MAX(e.sal) FROM Emp e GROUP BY e.dept
SELECT e.dept.deptno, MIN(e.sal) FROM Emp e GROUP BY e.dept
SELECT e.dept.dname,  AVG(e.sal) FROM Emp e GROUP BY e.dept
SELECT e.ename, e.dept.dname FROM Emp e WHERE e.dept.dname='ACCOUNTING'
SELECT e.dept.deptno, MAX(e.sal) FROM Emp e GROUP BY e.dept HAVING e.dept.deptno > 10

SELECT b, p FROM Book b, Publisher p WHERE b.fk_publisher = p.id
SELECT a, b FROM Author a LEFT JOIN a.books b
SELECT a, p FROM Author a JOIN a.publications p ON p.publishingDate > ?1
SELECT b FROM Book b WHERE b.publisher.name LIKE ‘%es%
SELECT p FROM Publication p
SELECT b FROM BlogPost b
SELECT a, p FROM Author a JOIN treat (a.publications AS Book) p



Select a from Author a where size(a.books) > 1;
SELECT a.firstName, a.lastName FROM Author a











```

# NATIVE QUERIES

##  RETRIEVE QUERIES

@Query(value = "select * FROM EMP e where e.sal = 800", nativeQuery = true)
public List<Employee> findWhosSalaryIs800();

@Query(value = "SELECT max(sal) FROM EMP", nativeQuery = true)
public BigDecimal findMaxSalary();

@Query(value ="SELECT * FROM emp WHERE sal IN(SELECT MAX(sal) FROM emp)", nativeQuery = true)
public List<Employee> findMaxSalEmployee();

@Query(value = "SELECT * FROM EMP WHERE ENAME LIKE %:pattern%", nativeQuery = true)
public List<Employee> searchBy(String pattern);

## DELETE QUERIES

@Modifying
@Query(value = "DELETE FROM EMP WHERE ENAME LIKE :name", nativeQuery = true)
public long deleteByName(String name);

@Modifying
@Query(value = "DELETE FROM EMP WHERE SAL <= :salary", nativeQuery = true)
public int deleteBelowSalaryEmployees(double salary);

@Modifying
@Query(value = "DELETE FROM EMP", nativeQuery = true)
public long deleteAllEmployees();

@Modifying
@Query(value = "DELETE FROM EMP WHERE ENAME LIKE %:pattern", nativeQuery = true)
public int deleteEmploeesStartsWith(String pattern);


## UPDATE QUERIES

@Modifying
@Query(value = "UPDATE EMP SET SAL=:newSalary WHERE SAL<=:belowSalary", nativeQuery = true)
public int updateEmpSalary(double newSalary, double belowSalary);

@Modifying 
@Query(value = "UPDATE EMP SET SAL = SAL + :increment WHERE EMPNO=:id", nativeQuery = true)
public int updateSalaryById(int id, double increment);

@Modifying
@Query(value = "UPDATE EMP SET SAL = SAL + :increment WHERE EMPNO=:id", nativeQuery = true)
public List<Employee> updateSalaryById2(int id, double increment);


## JOINS






+-+-+-+-+-+-+-+-+-+-+-+-+-
Joining multiple entities
+-+-+-+-+-+-+-+-+-+-+-+-+-

1. Inner joins
2. Left Outer Joins
3. Additional Join Conditions
4. Path expressions or implicit joins




1. Inner joins:
1.1 Related Entities
1.2 Unrelated Entities

1.1 Related Entities
Eg:-
Author{
	List<Book> books;
}

Book{
	
}

Query:-
SELECT a, b FROM Author a JOIN a.books b

Ex:-
@Query("SELECT e.ename, d.dname FROM Employee e JOIN e.dept d")
List<?> findEmployeesWithDept();


1.2 Unrelated Entities

SELECT b, p FROM Book b, Publisher p WHERE b.fk_publisher = p.id




2. Left Outer Joins:

SELECT a, b FROM Author a LEFT JOIN a.books b


3. Additional Join Conditions:

SELECT a, p FROM Author a JOIN a.publications p ON p.publishingDate > ?1

4. Path expressions or implicit joins:

SELECT b FROM Book b WHERE b.publisher.name LIKE ‘%es%


+-+-+-+-+-+-+-+-+-+-+-+-+--+-+-
Polymorphism and Downcasting
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

1. Polymorphism: When you choose an inheritance strategy that supports polymorphic queries, your query selects all instances of the specified class and its subclasses.


Publication{}
Book extends Publication{}
BlogPost extends Publication{}

Eg:-
SELECT p FROM Publication p

Eg:-
	
SELECT b FROM BlogPost b

2. Downcasting

	
SELECT a, p FROM Author a JOIN treat (a.publications AS Book) p


+-+-+-+-+-+-+-+-+-+-+-+-
WHERE CLAUSE:
+-+-+-+-+-+-+-+-+-+-+-+-
Operators for single-valued expressions:

Equal: author.id = 10
Not equal: author.id <> 10
Greater than: author.id > 10
Greater or equal then: author.id => 10
Smaller than: author.id < 10
Smaller or equal then: author.id <= 10
Between: author.id BETWEEN 5 and 10
Like: author.firstName LIKE ‘%and%’
Is null: author.firstName IS NULL
Is not null: author.firstName IS NULL
In: author.firstName IN (‘John’, ‘Jane’)

Operators for collection expressions:

Size: size(author.books) > 2
Member of: :myBook member of author.books
Is empty: author.books IS EMPTY

Eg:
SELECT a FROM Author a
WHERE 	a.firstName like ‘%and%’
	and a.id >= 20
	and size(author.books) >= 5


+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
Projection – The SELECT clause
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
1. Entities
2. Scalar values
3. Constructor references
4. Distinct Query Results

1. Entities:
	Select a from Author a;
	Select a from Author a where size(a.books) > 1;

2. Scalar values:
	SELECT a.firstName, a.lastName FROM Author a

3. Constructor references
Need to provide fully qualified class name.
		
SELECT new org.thoughts.on.java.model.AuthorValue(a.id, a.firstName, a.lastName) FROM Author a

4. Distinct Query Results
	SELECT DISTINCT a.lastName FROM Author a

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
PREDEFINED FUNCTIONS
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

- upper(str)
- lower(str)
- current_date()
- current_time()
- current_timestamp()
- substring(str, offset, length)
- trim(str)
- length(str)
- locate(String search, String s, int offset)
- abs(Numeric n)
- sqrt(Numeric n)
- mod(Numeric dividend, Numeric divisor): returns the remainder of a division
- treat(x as Type): downcasts x to the given Type
- size(Collection c)
- abs(Numeric n)
- index(orderedCollection): returns the index of the given value in an ordered Collection


+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--+-+-+-+-+-+-+-
Grouping – The GROUP BY and HAVING clause
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--+-+-+-+-+-+-

- count(var)
- sum(var)
- max(var)
- min(var)
- avg(var)



	SELECT a.lastName, COUNT(a) FROM Author a GROUP BY a.lastName
Ex:
@Query("SELECT e.job, count(job) from Employee e GROUP BY e.job")
List<?> groupByLastName();

List<?> list = repo.groupByLastName();
list.forEach(obj -> {
	Object[] arr = (Object[]) obj;
	System.out.println(Arrays.toString(arr));
});

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--+-+-+-+-+-+-+-
Ordering – The ORDER BY clause
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--+-+-+-+-+-+-

SELECT a FROM Author a ORDER BY a.lastName ASC, a.firstName DESC

	
SELECT a FROM Author a
	WHERE (SELECT count(b) FROM Book b WHERE a MEMBER OF b.authors ) > 1




# A2Z Query Methods

```java

## Query Methods Cheat Sheet

```java
	List<Employee> findAllByOrderByEname();
	List<Employee> findAllByOrderByEnameDesc();
	List<Employee> findAllByOrderBySalDesc();
	List<Employee> findAllByOrderBySalAsc();
	List<Employee> findAllByOrderBySal();
	
	List<Employee> findByEname(String name);
	List<Employee> findByEnameIs(String name);
	List<Employee> findByEnameEquals(String name);
	List<Employee> findByEnameIsNot(String name);
	
	List<Employee> findByCommIsNull();
	List<Employee> findByCommIsNotNull();
	
	List<Employee> findByEnameStartingWith(String prefix);
	List<Employee> findByEnameStartingWithAndEnameEndingWith(String prefix,String suffix);
	List<Employee> findByEnameContaining(String infix);
	List<Employee> findByEnameEndingWith(String suffix);

	List<Employee> findByEnameLike(String likePattern);
	List<Employee> findByEnameNotLike(String likePattern);
	
	List<Employee> findBySalLessThan(BigDecimal sal);
	List<Employee> findBySalLessThanEqual(BigDecimal sal);
	List<Employee> findBySalGreaterThanEqual(BigDecimal sal);
	List<Employee> findBySalGreaterThan(BigDecimal bigDecimal);
	List<Employee> findBySalLessThanOrderBySalAsc(BigDecimal bigDecimal);
	List<Employee> findBySalLessThanAndCommNotNull(BigDecimal bigDecimal);
	List<Employee> findBySalLessThanAndCommNotNullOrderByComm(BigDecimal bigDecimal);
	
	List<Employee> findByDeptno(int i);
	List<Employee> findBySalBetween(BigDecimal bigDecimal, BigDecimal bigDecimal2);
	List<Employee> findByDeptnoIn(List<Integer> collect);
	
	Optional<Employee> getByEname(String name);
	
	boolean existsByEname(String value);
	
	Employee getByUsername(String name);
	
	List<User> findByActiveTrue();
	List<User> findByActiveFalse();
	
	List<User> findByBirthDateAfter(ZonedDateTime birthDate);
	List<User> findByBirthDateBefore(ZonedDateTime birthDate);
	
	List<User> findByNameOrBirthDate(String name, ZonedDateTime birthDate);
	List<User> findByNameOrBirthDateAndActive(String name, ZonedDateTime birthDate, Boolean active);
	
```
```java
	Student findByName(String string);

	List<Student> findByDobAfter(LocalDate of);

	List<Student> findByDobBefore(LocalDate of);

	List<Student> findByActiveTrue();

	List<Student> findByActiveFalse();

	List<Student> findByOrderByName();

	List<Student> findByOrderByCgpaDesc();

	List<Student> findByOrderByDob();

	Student findFirstByOrderByName();

	Optional<Student> findFirstByOrderByCgpa();

	Optional<Student> findTopByOrderByCgpaDesc();

	List<Student> findTop3ByOrderByCgpaDesc();

	Optional<Student> findFirstByName(String string);

	Optional<Student> findFirstByGender(Gender gender);

	Optional<Student> findFirstByGenderOrderByCgpaDesc(Gender gender);

	Optional<Student> findFirstByGenderOrderByCgpa(Gender gender);

	List<Student> findFirst3ByOrderByCgpaDesc();

	List<Student> findAll(Sort sort);
```
```java
// RETRIVE METHODS
	
	boolean existsByEname(String name);
	boolean existsByEnameContainsIgnoreCase(String name);
	boolean existsByEnameStartsWithIgnoreCase(String name);
	int countByEnameContainsIgnoreCase(String name);
	
	@Query("select new java.lang.String(e.ename) from Employee e")
	public List<String> findAllEmployeeNames();
	
	List<Employee> findByEnameContainsIgnoreCase(String name);

	List<Employee> findByEnameStartingWith(String name);

	List<Employee> findByEnameStartingWithIgnoreCase(String name);

	List<Employee> findByEnameIgnoreCase(String name);

	// DELETE METHODS
	
	@Transactional
	int deleteByEname(String name);

	@Transactional
	int deleteById(int id);

	@Transactional
	long deleteByEnameIgnoreCase(String name);

	@Transactional
	List<Employee> removeByEnameIgnoreCase(String lastname);
	
	// UPDATE METHODS
	
	@Modifying
	@Transactional
	@Query("update Employee e set e.sal = :sal where e.empno = :id")
	int updateSalaryById(int id, BigDecimal sal);

	
	@Modifying
	@Transactional
	@Query("update Employee e set e.sal = :sal where e.ename like :name")
	int updateSalaryByNameLike(String name, BigDecimal sal);
```
```java
	@Query(value = "SELECT * FROM EMP WHERE ENAME LIKE %:pattern%", nativeQuery = true)
	List<Employee> searchBy(String pattern);
	
	@Modifying
	@Query(value = "DELETE FROM EMP WHERE ENAME LIKE :name", nativeQuery = true)
	int deleteByName(String name);
	
	@Query("SELECT e.ename, d.dname FROM Employee e JOIN e.dept d")
	List<?> findEmployeesWithDept();
	
	@Query("SELECT e.ename FROM Employee e where e.id = :id")
	Optional<String> findEnameById(int id);

	@Query("SELECT e.ename FROM Employee e where e.mgr = :mgr")
	List<String> findFirstByMgr(int mgr);
	
	@Query("SELECT e.job, max(sal) from Employee e GROUP BY e.job")
	List<?> groupByJobMax();
	
	@Query("SELECT e.job, min(sal) from Employee e GROUP BY e.job")
	List<?> groupByJobMin();

	@Query("SELECT e.job, count(sal) from Employee e GROUP BY e.job")
	List<?> groupByJobCount();

	@Query("SELECT e.job, avg(sal) from Employee e GROUP BY e.job")
	List<?> groupByJobAvg();
	
	@Query("SELECT e.job, sum(sal) from Employee e GROUP BY e.job")
	List<?> groupByJobSum();
```























































