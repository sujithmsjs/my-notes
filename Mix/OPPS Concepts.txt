paradigm
methodology

Object : An entity that has state and behavior is known as an object.
It contains
1. State : represents the data (value) of an object.

2. Behavior: represents the behavior (functionality) of an object such as deposit, withdraw, etc.
In Java, a method is like a function which is used to expose the behavior of an object.

3. Identity : An object identity is typically implemented via a unique ID. The value of the ID is not visible to the external user. However, it is used internally by the JVM to identify each object uniquely.


Class : A class is a template or blueprint from which objects are created. It is a logical entity. It can't be physical.

### Inheritance:
In Java is a mechanism in which one object acquires all the properties and behaviors of a parent object.

Types of inheritance in java
1. Single: When a class inherits another class, it is known as a single inheritance.

2. Multilevel: When there is a chain of inheritance, it is known as multilevel inheritance.

3. Hierarchical: When two or more classes inherits a single class, it is known as hierarchical inheritance. In the example given below, Dog and Cat classes inherits the Animal class, so there is hierarchical inheritance.


### Polymorphism
In Java it is a concept by which we can perform a single action in different ways. Polymorphism is derived from 2 Greek words: poly and morphs. The word "poly" means many and "morphs" means forms. So polymorphism means many forms.

There are two types of polymorphism in Java

1. Compile-time polymorphism


2. Runtime polymorphism
Runtime polymorphism or Dynamic Method Dispatch is a process in which a call to an overridden method is resolved at runtime rather than compile-time.

We can perform polymorphism in java by method overloading and method overriding.


### Abstraction
It is a process of hiding the implementation details and showing only functionality to the user. Abstraction lets you focus on what the object does instead of how it does it.

There are two ways to achieve abstraction in java
1. Abstract class (0 to 100%)
2. Interface (100%)

### Abstract Method
A method which is declared as abstract and does not have implementation is known as an abstract method.

### Encapsulation
In Java it is a process of wrapping code and data together into a single unit, for example, a capsule which is mixed of several medicines.

We can create a fully encapsulated class in Java by making all the data members of the class private. Now we can use setter and getter methods to set and get the data in it.

Advantage of Encapsulation in Java
1. By providing only a setter or getter method, you can make the class read-only or write-only.
2. It provides you the control over the data.
3. It is a way to achieve data hiding in Java because other class will not be able to access the data through the private data members.
4. The encapsulate class is easy to test. So, it is better for unit testing.


Coupling: 
In software engineering, the coupling is the degree of interdependence between software modules. Two modules that are tightly coupled are strongly dependent on each other. However, two modules that are loosely coupled are not dependent on each other. Uncoupled modules have no interdependence at all within them.

1. Week coupling
2. Strong coupling

Cohesion
cohesive adjective
forming a united whole
a cohesive group
1. Highly Cohesive
2. Weakly Cohesive

Association
Aggregation
Composition





### Initialization:

> Assigning a value to a variable is called initialization. For example, cost = 100. It sets the initial value of the variable cost to 100.

### Instantiation:

> Creating an object by using the new keyword is called instantiation. For example, Car ca = new Car(). It creates an instance of the Car

