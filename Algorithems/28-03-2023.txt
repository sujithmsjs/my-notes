{
	"user_id" : 101,
	"games" :
	[
		{
			"id" : 1000,
			"name" : "Mario"
		}
	]
}


{
	 "org_id" : 1,
	"groups" :
	[
		group_id:
		users: []

	]
}

New : 419,460,450,457
Old : 419,460,486,451

	@Query(value = "SELECT * FROM odeskb2b.odesk_users where org_id = ?1", nativeQuery = true)
	public List<Integer> findAllUserIds(Pageable pageable, Integer orgId);


------------------------------
SETTINGS REVERT BACK TO NORMAL
------------------------------
git reset --hard HEAD
git clean -fd


12:17 28-03-2023


------------------------------
MONGO_DB
------------------------------

Explain groups.$.users
In MongoDB, the positional operator ($) is used to update an element in an array based on its index or position.

In the context of the provided MongoDB record, groups.$.users represents the array of users within a specific group, where $ denotes the index or position of the matched element in the groups array.

For example, to update the second group's users with the ID 3030 and 3031, you can use the following query:

db.collection.update(
   { "groups.groupId": 2002 },
   { $set: { "groups.$.users": [3030, 3031, 3032, 3033] } }
)


db.getCollection('group_users').find({"groups.groupId" : 2001}, {"groups.$" : 1 })





db.getCollection('group_users').find({'groups' : { $exists : true} } )


db.getCollection('group_users').find(
{
        groups : { $exists : true}
}
)


db.getCollection('group_users').find(
{        'groups.groupId' : 2001 },
{        'groups.$' : 1 }
)



Europe/Kyiv
Europe/Sofia
Brazil/Acre
Australia/West
Asia/Jakarta
America/Havana






public static void main(String[] args) {
		SpringApplication.run(ODeskAdminApplication.class, args);

		LocalDateTime localDateTime = LocalDateTime.now();

		ZoneId istZoneId = ZoneId.of("Asia/Kolkata");
		ZonedDateTime atZone = localDateTime.atZone(istZoneId);
		ZonedDateTime instant = ZonedDateTime.now();
		System.out.println("ZonedDateTime.now() " + instant);
		ZonedDateTime instantInUTC = instant.withZoneSameInstant(istZoneId);

		System.out.println("ODesk Internal Admin :: STARTED Normal time " + localDateTime);
		System.out.println("ODesk Internal Admin :: STARTED Zoned  time " + instantInUTC);

	}


@PostConstruct
	public void init() {
		TimeZone.setDefault(TimeZone.getTimeZone("America/Havana"));
//		System.setProperty("user.timezone", "EST");
//		// Setting Spring Boot SetTimeZone
		System.out.println("Timezone has been changed to " + TimeZone.getDefault());
//		TimeZone.setDefault(TimeZone.getTimeZone("EST"));
		String[] strings = TimeZone.getAvailableIDs();
		System.out.println("Timezones");
		for (String s : strings) {
			System.out.println(s);
		}
	}

https://howtodoinjava.com/java/date-time/convert-date-between-timezones/





